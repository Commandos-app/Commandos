diff --git a/node_modules/@tauri-apps/api/window.ts b/node_modules/@tauri-apps/api/window.ts
index fa0fed9..82e0578 100644
--- a/node_modules/@tauri-apps/api/window.ts
+++ b/node_modules/@tauri-apps/api/window.ts
@@ -90,103 +90,103 @@ import { emit } from './helpers/event'
 
 /** Allows you to retrieve information about a given monitor. */
 interface Monitor {
-  /** Human-readable name of the monitor */
-  name: string | null
-  /** The monitor's resolution. */
-  size: PhysicalSize
-  /** the Top-left corner position of the monitor relative to the larger full screen area. */
-  position: PhysicalPosition
-  /** The scale factor that can be used to map physical pixels to logical pixels. */
-  scaleFactor: number
+    /** Human-readable name of the monitor */
+    name: string | null
+    /** The monitor's resolution. */
+    size: PhysicalSize
+    /** the Top-left corner position of the monitor relative to the larger full screen area. */
+    position: PhysicalPosition
+    /** The scale factor that can be used to map physical pixels to logical pixels. */
+    scaleFactor: number
 }
 
 /** A size represented in logical pixels. */
 class LogicalSize {
-  type = 'Logical'
-  width: number
-  height: number
-
-  constructor(width: number, height: number) {
-    this.width = width
-    this.height = height
-  }
+    type = 'Logical'
+    width: number
+    height: number
+
+    constructor(width: number, height: number) {
+        this.width = width
+        this.height = height
+    }
 }
 
 /** A size represented in physical pixels. */
 class PhysicalSize {
-  type = 'Physical'
-  width: number
-  height: number
-
-  constructor(width: number, height: number) {
-    this.width = width
-    this.height = height
-  }
-
-  /** Converts the physical size to a logical one. */
-  toLogical(scaleFactor: number): LogicalSize {
-    return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor)
-  }
+    type = 'Physical'
+    width: number
+    height: number
+
+    constructor(width: number, height: number) {
+        this.width = width
+        this.height = height
+    }
+
+    /** Converts the physical size to a logical one. */
+    toLogical(scaleFactor: number): LogicalSize {
+        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor)
+    }
 }
 
 /** A position represented in logical pixels. */
 class LogicalPosition {
-  type = 'Logical'
-  x: number
-  y: number
-
-  constructor(x: number, y: number) {
-    this.x = x
-    this.y = y
-  }
+    type = 'Logical'
+    x: number
+    y: number
+
+    constructor(x: number, y: number) {
+        this.x = x
+        this.y = y
+    }
 }
 
 /** A position represented in physical pixels. */
 class PhysicalPosition {
-  type = 'Physical'
-  x: number
-  y: number
-
-  constructor(x: number, y: number) {
-    this.x = x
-    this.y = y
-  }
-
-  /** Converts the physical position to a logical one. */
-  toLogical(scaleFactor: number): LogicalPosition {
-    return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor)
-  }
+    type = 'Physical'
+    x: number
+    y: number
+
+    constructor(x: number, y: number) {
+        this.x = x
+        this.y = y
+    }
+
+    /** Converts the physical position to a logical one. */
+    toLogical(scaleFactor: number): LogicalPosition {
+        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor)
+    }
 }
 
 /** @ignore */
 interface WindowDef {
-  label: string
+    label: string
 }
 
 /** @ignore */
 declare global {
-  interface Window {
-    __TAURI__: {
-      __windows: WindowDef[]
-      __currentWindow: WindowDef
+    interface Window {
+        __TAURI__: {
+            __windows: WindowDef[]
+            __currentWindow: WindowDef
+        }
     }
-  }
 }
 
 /** Attention type to request on a window. */
 enum UserAttentionType {
-  /**
-   * ## Platform-specific
-   *  - **macOS:** Bounces the dock icon until the application is in focus.
-   * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.
-   */
-  Critical = 1,
-  /**
-   * ## Platform-specific
-   * - **macOS:** Bounces the dock icon once.
-   * - **Windows:** Flashes the taskbar button until the application is in focus.
-   */
-  Informational
+    /**
+     * ## Platform-specific
+     *  - **macOS:** Bounces the dock icon until the application is in focus.
+     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.
+     */
+    Critical = 1,
+    /**
+     * ## Platform-specific
+     * - **macOS:** Bounces the dock icon once.
+     * - **Windows:** Flashes the taskbar button until the application is in focus.
+     */
+    Informational
 }
 
 /**
@@ -195,10 +195,9 @@ enum UserAttentionType {
  * @return The current WebviewWindow.
  */
 function getCurrent(): WebviewWindow {
-  // @ts-expect-error
-  return new WebviewWindow(window.__TAURI__.__currentWindow.label, {
-    skip: true
-  })
+    return new WebviewWindow(window.__TAURI__.__currentWindow.label, {
+        skip: true
+    })
 }
 
 /**
@@ -207,10 +206,9 @@ function getCurrent(): WebviewWindow {
  * @return The list of WebviewWindow.
  */
 function getAll(): WebviewWindow[] {
-  // @ts-expect-error
-  return window.__TAURI__.__windows.map(
-    (w) => new WebviewWindow(w, { skip: true })
-  )
+    return window.__TAURI__.__windows.map(
+        (w) => new WebviewWindow(w.label, { skipTaskbar: true })
+    )
 }
 
 /** @ignore */
@@ -221,823 +219,823 @@ const localTauriEvents = ['tauri://created', 'tauri://error']
  * A webview window handle allows emitting and listening to events from the backend that are tied to the window.
  */
 class WebviewWindowHandle {
-  /** Window label. */
-  label: string
-  /** Local event listeners. */
-  listeners: { [key: string]: Array<EventCallback<any>> }
-
-  constructor(label: string) {
-    this.label = label
-    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
-    this.listeners = Object.create(null)
-  }
-
-  /**
-   * Listen to an event emitted by the backend that is tied to the webview window.
-   *
-   * @param event Event name.
-   * @param handler Event handler.
-   * @returns A promise resolving to a function to unlisten to the event.
-   */
-  async listen<T>(
-    event: EventName,
-    handler: EventCallback<T>
-  ): Promise<UnlistenFn> {
-    if (this._handleTauriEvent(event, handler)) {
-      return Promise.resolve(() => {
-        // eslint-disable-next-line security/detect-object-injection
-        const listeners = this.listeners[event]
-        listeners.splice(listeners.indexOf(handler), 1)
-      })
+    /** Window label. */
+    label: string
+    /** Local event listeners. */
+    listeners: { [key: string]: Array<EventCallback<any>> }
+
+    constructor(label: string) {
+        this.label = label
+        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
+        this.listeners = Object.create(null)
     }
-    return listen(event, handler)
-  }
-
-  /**
-   * Listen to an one-off event emitted by the backend that is tied to the webview window.
-   *
-   * @param event Event name.
-   * @param handler Event handler.
-   * @returns A promise resolving to a function to unlisten to the event.
-   */
-  async once<T>(event: string, handler: EventCallback<T>): Promise<UnlistenFn> {
-    if (this._handleTauriEvent(event, handler)) {
-      return Promise.resolve(() => {
-        // eslint-disable-next-line security/detect-object-injection
-        const listeners = this.listeners[event]
-        listeners.splice(listeners.indexOf(handler), 1)
-      })
+
+    /**
+     * Listen to an event emitted by the backend that is tied to the webview window.
+     *
+     * @param event Event name.
+     * @param handler Event handler.
+     * @returns A promise resolving to a function to unlisten to the event.
+     */
+    async listen<T>(
+        event: EventName,
+        handler: EventCallback<T>
+    ): Promise<UnlistenFn> {
+        if (this._handleTauriEvent(event, handler)) {
+            return Promise.resolve(() => {
+                // eslint-disable-next-line security/detect-object-injection
+                const listeners = this.listeners[event]
+                listeners.splice(listeners.indexOf(handler), 1)
+            })
+        }
+        return listen(event, handler)
     }
-    return once(event, handler)
-  }
-
-  /**
-   * Emits an event to the backend, tied to the webview window.
-   *
-   * @param event Event name.
-   * @param payload Event payload.
-   */
-  async emit(event: string, payload?: string): Promise<void> {
-    if (localTauriEvents.includes(event)) {
-      // eslint-disable-next-line
-      for (const handler of this.listeners[event] || []) {
-        handler({ event, id: -1, payload })
-      }
-      return Promise.resolve()
+
+    /**
+     * Listen to an one-off event emitted by the backend that is tied to the webview window.
+     *
+     * @param event Event name.
+     * @param handler Event handler.
+     * @returns A promise resolving to a function to unlisten to the event.
+     */
+    async once<T>(event: string, handler: EventCallback<T>): Promise<UnlistenFn> {
+        if (this._handleTauriEvent(event, handler)) {
+            return Promise.resolve(() => {
+                // eslint-disable-next-line security/detect-object-injection
+                const listeners = this.listeners[event]
+                listeners.splice(listeners.indexOf(handler), 1)
+            })
+        }
+        return once(event, handler)
     }
-    return emit(event, this.label, payload)
-  }
-
-  _handleTauriEvent<T>(event: string, handler: EventCallback<T>): boolean {
-    if (localTauriEvents.includes(event)) {
-      if (!(event in this.listeners)) {
-        // eslint-disable-next-line
-        this.listeners[event] = [handler]
-      } else {
-        // eslint-disable-next-line
-        this.listeners[event].push(handler)
-      }
-      return true
+
+    /**
+     * Emits an event to the backend, tied to the webview window.
+     *
+     * @param event Event name.
+     * @param payload Event payload.
+     */
+    async emit(event: string, payload?: string): Promise<void> {
+        if (localTauriEvents.includes(event)) {
+            // eslint-disable-next-line
+            for (const handler of this.listeners[event] || []) {
+                handler({ event, id: -1, payload })
+            }
+            return Promise.resolve()
+        }
+        return emit(event, this.label, payload)
+    }
+
+    _handleTauriEvent<T>(event: string, handler: EventCallback<T>): boolean {
+        if (localTauriEvents.includes(event)) {
+            if (!(event in this.listeners)) {
+                // eslint-disable-next-line
+                this.listeners[event] = [handler]
+            } else {
+                // eslint-disable-next-line
+                this.listeners[event].push(handler)
+            }
+            return true
+        }
+        return false
     }
-    return false
-  }
 }
 
 /**
  * Manage the current window object.
  */
 class WindowManager extends WebviewWindowHandle {
-  // Getters
-  /** The scale factor that can be used to map physical pixels to logical pixels. */
-  async scaleFactor(): Promise<number> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'scaleFactor'
-          }
-        }
-      }
-    })
-  }
+    // Getters
+    /** The scale factor that can be used to map physical pixels to logical pixels. */
+    async scaleFactor(): Promise<number> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'scaleFactor'
+                    }
+                }
+            }
+        })
+    }
 
-  /** The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop. */
-  async innerPosition(): Promise<PhysicalPosition> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'innerPosition'
-          }
-        }
-      }
-    })
-  }
+    /** The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop. */
+    async innerPosition(): Promise<PhysicalPosition> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'innerPosition'
+                    }
+                }
+            }
+        })
+    }
 
-  /** The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop. */
-  async outerPosition(): Promise<PhysicalPosition> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'outerPosition'
-          }
-        }
-      }
-    })
-  }
+    /** The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop. */
+    async outerPosition(): Promise<PhysicalPosition> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'outerPosition'
+                    }
+                }
+            }
+        })
+    }
 
-  /**
-   * The physical size of the window's client area.
-   * The client area is the content of the window, excluding the title bar and borders.
-   */
-  async innerSize(): Promise<PhysicalSize> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'innerSize'
-          }
-        }
-      }
-    })
-  }
+    /**
+     * The physical size of the window's client area.
+     * The client area is the content of the window, excluding the title bar and borders.
+     */
+    async innerSize(): Promise<PhysicalSize> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'innerSize'
+                    }
+                }
+            }
+        })
+    }
 
-  /**
-   * The physical size of the entire window.
-   * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.
-   */
-  async outerSize(): Promise<PhysicalSize> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'outerSize'
-          }
-        }
-      }
-    })
-  }
+    /**
+     * The physical size of the entire window.
+     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.
+     */
+    async outerSize(): Promise<PhysicalSize> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'outerSize'
+                    }
+                }
+            }
+        })
+    }
 
-  /** Gets the window's current fullscreen state. */
-  async isFullscreen(): Promise<boolean> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'isFullscreen'
-          }
-        }
-      }
-    })
-  }
+    /** Gets the window's current fullscreen state. */
+    async isFullscreen(): Promise<boolean> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'isFullscreen'
+                    }
+                }
+            }
+        })
+    }
 
-  /** Gets the window's current maximized state. */
-  async isMaximized(): Promise<boolean> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'isMaximized'
-          }
-        }
-      }
-    })
-  }
+    /** Gets the window's current maximized state. */
+    async isMaximized(): Promise<boolean> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'isMaximized'
+                    }
+                }
+            }
+        })
+    }
 
-  /** Gets the window's current decorated state. */
-  async isDecorated(): Promise<boolean> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'isDecorated'
-          }
-        }
-      }
-    })
-  }
+    /** Gets the window's current decorated state. */
+    async isDecorated(): Promise<boolean> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'isDecorated'
+                    }
+                }
+            }
+        })
+    }
 
-  /** Gets the window's current resizable state. */
-  async isResizable(): Promise<boolean> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'isResizable'
-          }
-        }
-      }
-    })
-  }
+    /** Gets the window's current resizable state. */
+    async isResizable(): Promise<boolean> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'isResizable'
+                    }
+                }
+            }
+        })
+    }
 
-  /** Gets the window's current visible state. */
-  async isVisible(): Promise<boolean> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'isVisible'
-          }
-        }
-      }
-    })
-  }
+    /** Gets the window's current visible state. */
+    async isVisible(): Promise<boolean> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'isVisible'
+                    }
+                }
+            }
+        })
+    }
 
-  // Setters
+    // Setters
+
+    /**
+     * Centers the window.
+     *
+     * @param resizable
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async center(): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'center'
+                    }
+                }
+            }
+        })
+    }
 
-  /**
-   * Centers the window.
-   *
-   * @param resizable
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async center(): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'center'
-          }
+    /**
+     *  Requests user attention to the window, this has no effect if the application
+     * is already focused. How requesting for user attention manifests is platform dependent,
+     * see `UserAttentionType` for details.
+     *
+     * Providing `null` will unset the request for user attention. Unsetting the request for
+     * user attention might not be done automatically by the WM when the window receives input.
+     *
+     * ## Platform-specific
+     *
+     * - **macOS:** `null` has no effect.
+     *
+     * @param resizable
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async requestUserAttention(
+        requestType: UserAttentionType | null
+    ): Promise<void> {
+        let requestType_ = null
+        if (requestType) {
+            if (requestType === UserAttentionType.Critical) {
+                requestType_ = { type: 'Critical' }
+            } else {
+                requestType_ = { type: 'Informational' }
+            }
         }
-      }
-    })
-  }
-
-  /**
-   *  Requests user attention to the window, this has no effect if the application
-   * is already focused. How requesting for user attention manifests is platform dependent,
-   * see `UserAttentionType` for details.
-   *
-   * Providing `null` will unset the request for user attention. Unsetting the request for
-   * user attention might not be done automatically by the WM when the window receives input.
-   *
-   * ## Platform-specific
-   *
-   * - **macOS:** `null` has no effect.
-   *
-   * @param resizable
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async requestUserAttention(
-    requestType: UserAttentionType | null
-  ): Promise<void> {
-    let requestType_ = null
-    if (requestType) {
-      if (requestType === UserAttentionType.Critical) {
-        requestType_ = { type: 'Critical' }
-      } else {
-        requestType_ = { type: 'Informational' }
-      }
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'requestUserAttention',
+                        payload: requestType_
+                    }
+                }
+            }
+        })
     }
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'requestUserAttention',
-            payload: requestType_
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Updates the window resizable flag.
-   *
-   * @param resizable
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setResizable(resizable: boolean): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setResizable',
-            payload: resizable
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Sets the window title.
-   *
-   * @param title The new title
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setTitle(title: string): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setTitle',
-            payload: title
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Maximizes the window.
-   *
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async maximize(): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'maximize'
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Unmaximizes the window.
-   *
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async unmaximize(): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'unmaximize'
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Minimizes the window.
-   *
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async minimize(): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'minimize'
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Unminimizes the window.
-   *
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async unminimize(): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'unminimize'
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Sets the window visibility to true.
-   *
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async show(): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'show'
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Sets the window visibility to false.
-   *
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async hide(): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'hide'
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Closes the window.
-   *
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async close(): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'close'
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Whether the window should have borders and bars.
-   *
-   * @param decorations Whether the window should have borders and bars.
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setDecorations(decorations: boolean): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setDecorations',
-            payload: decorations
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Whether the window should always be on top of other windows.
-   *
-   * @param alwaysOnTop Whether the window should always be on top of other windows or not.
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setAlwaysOnTop(alwaysOnTop: boolean): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setAlwaysOnTop',
-            payload: alwaysOnTop
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Resizes the window.
-   * @example
-   * ```typescript
-   * import { appWindow, LogicalSize } from '@tauri-apps/api/window'
-   * await appWindow.setSize(new LogicalSize(600, 500))
-   * ```
-   *
-   * @param size The logical or physical size.
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setSize(size: LogicalSize | PhysicalSize): Promise<void> {
-    if (!size || (size.type !== 'Logical' && size.type !== 'Physical')) {
-      throw new Error(
-        'the `size` argument must be either a LogicalSize or a PhysicalSize instance'
-      )
+
+    /**
+     * Updates the window resizable flag.
+     *
+     * @param resizable
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setResizable(resizable: boolean): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setResizable',
+                        payload: resizable
+                    }
+                }
+            }
+        })
     }
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setSize',
-            payload: {
-              type: size.type,
-              data: {
-                width: size.width,
-                height: size.height
-              }
+
+    /**
+     * Sets the window title.
+     *
+     * @param title The new title
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setTitle(title: string): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setTitle',
+                        payload: title
+                    }
+                }
             }
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Sets the window min size. If the `size` argument is not provided, the min size is unset.
-   * @example
-   * ```typescript
-   * import { appWindow, PhysicalSize } from '@tauri-apps/api/window'
-   * await appWindow.setMinSize(new PhysicalSize(600, 500))
-   * ```
-   *
-   * @param size The logical or physical size.
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setMinSize(
-    size: LogicalSize | PhysicalSize | undefined
-  ): Promise<void> {
-    if (size && size.type !== 'Logical' && size.type !== 'Physical') {
-      throw new Error(
-        'the `size` argument must be either a LogicalSize or a PhysicalSize instance'
-      )
+        })
     }
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setMinSize',
-            payload: size
-              ? {
-                  type: size.type,
-                  data: {
-                    width: size.width,
-                    height: size.height
-                  }
+
+    /**
+     * Maximizes the window.
+     *
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async maximize(): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'maximize'
+                    }
                 }
-              : null
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Sets the window max size. If the `size` argument is undefined, the max size is unset.
-   * @example
-   * ```typescript
-   * import { appWindow, LogicalSize } from '@tauri-apps/api/window'
-   * await appWindow.setMaxSize(new LogicalSize(600, 500))
-   * ```
-   *
-   * @param size The logical or physical size.
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setMaxSize(
-    size: LogicalSize | PhysicalSize | undefined
-  ): Promise<void> {
-    if (size && size.type !== 'Logical' && size.type !== 'Physical') {
-      throw new Error(
-        'the `size` argument must be either a LogicalSize or a PhysicalSize instance'
-      )
+            }
+        })
     }
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setMaxSize',
-            payload: size
-              ? {
-                  type: size.type,
-                  data: {
-                    width: size.width,
-                    height: size.height
-                  }
+
+    /**
+     * Unmaximizes the window.
+     *
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async unmaximize(): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'unmaximize'
+                    }
                 }
-              : null
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Sets the window position.
-   * @example
-   * ```typescript
-   * import { appWindow, LogicalPosition } from '@tauri-apps/api/window'
-   * await appWindow.setPosition(new LogicalPosition(600, 500))
-   * ```
-   *
-   * @param position The new position, in logical or physical pixels.
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setPosition(
-    position: LogicalPosition | PhysicalPosition
-  ): Promise<void> {
-    if (
-      !position ||
-      (position.type !== 'Logical' && position.type !== 'Physical')
-    ) {
-      throw new Error(
-        'the `position` argument must be either a LogicalPosition or a PhysicalPosition instance'
-      )
+            }
+        })
     }
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setPosition',
-            payload: {
-              type: position.type,
-              data: {
-                x: position.x,
-                y: position.y
-              }
+
+    /**
+     * Minimizes the window.
+     *
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async minimize(): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'minimize'
+                    }
+                }
             }
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Sets the window fullscreen state.
-   *
-   * @param fullscreen Whether the window should go to fullscreen or not.
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setFullscreen(fullscreen: boolean): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setFullscreen',
-            payload: fullscreen
-          }
-        }
-      }
-    })
-  }
-
-  /**
-   * Bring the window to front and focus.
-   *
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setFocus(): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setFocus'
-          }
+        })
+    }
+
+    /**
+     * Unminimizes the window.
+     *
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async unminimize(): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'unminimize'
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Sets the window visibility to true.
+     *
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async show(): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'show'
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Sets the window visibility to false.
+     *
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async hide(): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'hide'
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Closes the window.
+     *
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async close(): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'close'
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Whether the window should have borders and bars.
+     *
+     * @param decorations Whether the window should have borders and bars.
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setDecorations(decorations: boolean): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setDecorations',
+                        payload: decorations
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Whether the window should always be on top of other windows.
+     *
+     * @param alwaysOnTop Whether the window should always be on top of other windows or not.
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setAlwaysOnTop(alwaysOnTop: boolean): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setAlwaysOnTop',
+                        payload: alwaysOnTop
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Resizes the window.
+     * @example
+     * ```typescript
+     * import { appWindow, LogicalSize } from '@tauri-apps/api/window'
+     * await appWindow.setSize(new LogicalSize(600, 500))
+     * ```
+     *
+     * @param size The logical or physical size.
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setSize(size: LogicalSize | PhysicalSize): Promise<void> {
+        if (!size || (size.type !== 'Logical' && size.type !== 'Physical')) {
+            throw new Error(
+                'the `size` argument must be either a LogicalSize or a PhysicalSize instance'
+            )
         }
-      }
-    })
-  }
-
-  /**
-   * Sets the window icon.
-   *
-   * @param icon Icon bytes or path to the icon file.
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setIcon(icon: string | number[]): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setIcon',
-            payload: {
-              icon
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setSize',
+                        payload: {
+                            type: size.type,
+                            data: {
+                                width: size.width,
+                                height: size.height
+                            }
+                        }
+                    }
+                }
             }
-          }
+        })
+    }
+
+    /**
+     * Sets the window min size. If the `size` argument is not provided, the min size is unset.
+     * @example
+     * ```typescript
+     * import { appWindow, PhysicalSize } from '@tauri-apps/api/window'
+     * await appWindow.setMinSize(new PhysicalSize(600, 500))
+     * ```
+     *
+     * @param size The logical or physical size.
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setMinSize(
+        size: LogicalSize | PhysicalSize | undefined
+    ): Promise<void> {
+        if (size && size.type !== 'Logical' && size.type !== 'Physical') {
+            throw new Error(
+                'the `size` argument must be either a LogicalSize or a PhysicalSize instance'
+            )
         }
-      }
-    })
-  }
-
-  /**
-   * Whether to show the window icon in the task bar or not.
-   *
-   * @param skip true to hide window icon, false to show it.
-   * @returns A promise indicating the success or failure of the operation.
-   */
-  async setSkipTaskbar(skip: boolean): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'setSkipTaskbar',
-            payload: skip
-          }
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setMinSize',
+                        payload: size
+                            ? {
+                                type: size.type,
+                                data: {
+                                    width: size.width,
+                                    height: size.height
+                                }
+                            }
+                            : null
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Sets the window max size. If the `size` argument is undefined, the max size is unset.
+     * @example
+     * ```typescript
+     * import { appWindow, LogicalSize } from '@tauri-apps/api/window'
+     * await appWindow.setMaxSize(new LogicalSize(600, 500))
+     * ```
+     *
+     * @param size The logical or physical size.
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setMaxSize(
+        size: LogicalSize | PhysicalSize | undefined
+    ): Promise<void> {
+        if (size && size.type !== 'Logical' && size.type !== 'Physical') {
+            throw new Error(
+                'the `size` argument must be either a LogicalSize or a PhysicalSize instance'
+            )
         }
-      }
-    })
-  }
-
-  /**
-   * Starts dragging the window.
-   *
-   * @return A promise indicating the success or failure of the operation.
-   */
-  async startDragging(): Promise<void> {
-    return invokeTauriCommand({
-      __tauriModule: 'Window',
-      message: {
-        cmd: 'manage',
-        data: {
-          label: this.label,
-          cmd: {
-            type: 'startDragging'
-          }
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setMaxSize',
+                        payload: size
+                            ? {
+                                type: size.type,
+                                data: {
+                                    width: size.width,
+                                    height: size.height
+                                }
+                            }
+                            : null
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Sets the window position.
+     * @example
+     * ```typescript
+     * import { appWindow, LogicalPosition } from '@tauri-apps/api/window'
+     * await appWindow.setPosition(new LogicalPosition(600, 500))
+     * ```
+     *
+     * @param position The new position, in logical or physical pixels.
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setPosition(
+        position: LogicalPosition | PhysicalPosition
+    ): Promise<void> {
+        if (
+            !position ||
+            (position.type !== 'Logical' && position.type !== 'Physical')
+        ) {
+            throw new Error(
+                'the `position` argument must be either a LogicalPosition or a PhysicalPosition instance'
+            )
         }
-      }
-    })
-  }
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setPosition',
+                        payload: {
+                            type: position.type,
+                            data: {
+                                x: position.x,
+                                y: position.y
+                            }
+                        }
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Sets the window fullscreen state.
+     *
+     * @param fullscreen Whether the window should go to fullscreen or not.
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setFullscreen(fullscreen: boolean): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setFullscreen',
+                        payload: fullscreen
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Bring the window to front and focus.
+     *
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setFocus(): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setFocus'
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Sets the window icon.
+     *
+     * @param icon Icon bytes or path to the icon file.
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setIcon(icon: string | number[]): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setIcon',
+                        payload: {
+                            icon
+                        }
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Whether to show the window icon in the task bar or not.
+     *
+     * @param skip true to hide window icon, false to show it.
+     * @returns A promise indicating the success or failure of the operation.
+     */
+    async setSkipTaskbar(skip: boolean): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'setSkipTaskbar',
+                        payload: skip
+                    }
+                }
+            }
+        })
+    }
+
+    /**
+     * Starts dragging the window.
+     *
+     * @return A promise indicating the success or failure of the operation.
+     */
+    async startDragging(): Promise<void> {
+        return invokeTauriCommand({
+            __tauriModule: 'Window',
+            message: {
+                cmd: 'manage',
+                data: {
+                    label: this.label,
+                    cmd: {
+                        type: 'startDragging'
+                    }
+                }
+            }
+        })
+    }
 }
 
 /**
@@ -1068,40 +1066,39 @@ class WindowManager extends WebviewWindowHandle {
  * ```
  */
 class WebviewWindow extends WindowManager {
-  constructor(label: string, options: WindowOptions = {}) {
-    super(label)
-    // @ts-expect-error
-    if (!options?.skip) {
-      invokeTauriCommand({
-        __tauriModule: 'Window',
-        message: {
-          cmd: 'createWebview',
-          data: {
-            options: {
-              label,
-              ...options
-            }
-          }
+    constructor(label: string, options: WindowOptions | { skip: boolean } = {}) {
+        super(label)
+        // @ts-expect-error
+        if (!options?.skip) {
+            invokeTauriCommand({
+                __tauriModule: 'Window',
+                message: {
+                    cmd: 'createWebview',
+                    data: {
+                        options: {
+                            label,
+                            ...options
+                        }
+                    }
+                }
+            })
+                .then(async () => this.emit('tauri://created'))
+                .catch(async (e) => this.emit('tauri://error', e))
         }
-      })
-        .then(async () => this.emit('tauri://created'))
-        .catch(async (e) => this.emit('tauri://error', e))
     }
-  }
-
-  /**
-   * Gets the WebviewWindow for the webview associated with the given label.
-   *
-   * @param label The webview window label.
-   * @returns The WebviewWindow instance to communicate with the webview or null if the webview doesn't exist.
-   */
-  static getByLabel(label: string): WebviewWindow | null {
-    if (getAll().some((w) => w.label === label)) {
-      // @ts-expect-error
-      return new WebviewWindow(label, { skip: true })
+
+    /**
+     * Gets the WebviewWindow for the webview associated with the given label.
+     *
+     * @param label The webview window label.
+     * @returns The WebviewWindow instance to communicate with the webview or null if the webview doesn't exist.
+     */
+    static getByLabel(label: string): WebviewWindow | null {
+        if (getAll().some((w) => w.label === label)) {
+            return new WebviewWindow(label, { skip: true })
+        }
+        return null
     }
-    return null
-  }
 }
 
 /** The WebviewWindow for the current window. */
@@ -1110,48 +1107,48 @@ const appWindow = new WebviewWindow()
 
 /** Configuration for the window to create. */
 interface WindowOptions {
-  /**
-   * Remote URL or local file path to open, e.g. `https://github.com/tauri-apps` or `path/to/page.html`.
-   */
-  url?: string
-  /** Show window in the center of the screen.. */
-  center?: boolean
-  /** The initial vertical position. Only applies if `y` is also set. */
-  x?: number
-  /** The initial horizontal position. Only applies if `x` is also set. */
-  y?: number
-  /** The initial width. */
-  width?: number
-  /** The initial height. */
-  height?: number
-  /** The minimum width. Only applies if `minHeight` is also set. */
-  minWidth?: number
-  /** The minimum height. Only applies if `minWidth` is also set. */
-  minHeight?: number
-  /** The maximum width. Only applies if `maxHeight` is also set. */
-  maxWidth?: number
-  /** The maximum height. Only applies if `maxWidth` is also set. */
-  maxHeight?: number
-  /** Whether the window is resizable or not. */
-  resizable?: boolean
-  /** Window title. */
-  title?: string
-  /** Whether the window is in fullscreen mode or not. */
-  fullscreen?: boolean
-  /** Whether the window will be initially hidden or focused. */
-  focus?: boolean
-  /** Whether the window is transparent or not. */
-  transparent?: boolean
-  /** Whether the window should be maximized upon creation or not. */
-  maximized?: boolean
-  /** Whether the window should be immediately visible upon creation or not. */
-  visible?: boolean
-  /** Whether the window should have borders and bars or not. */
-  decorations?: boolean
-  /** Whether the window should always be on top of other windows or not. */
-  alwaysOnTop?: boolean
-  /** Whether or not the window icon should be added to the taskbar. */
-  skipTaskbar?: boolean
+    /**
+     * Remote URL or local file path to open, e.g. `https://github.com/tauri-apps` or `path/to/page.html`.
+     */
+    url?: string
+    /** Show window in the center of the screen.. */
+    center?: boolean
+    /** The initial vertical position. Only applies if `y` is also set. */
+    x?: number
+    /** The initial horizontal position. Only applies if `x` is also set. */
+    y?: number
+    /** The initial width. */
+    width?: number
+    /** The initial height. */
+    height?: number
+    /** The minimum width. Only applies if `minHeight` is also set. */
+    minWidth?: number
+    /** The minimum height. Only applies if `minWidth` is also set. */
+    minHeight?: number
+    /** The maximum width. Only applies if `maxHeight` is also set. */
+    maxWidth?: number
+    /** The maximum height. Only applies if `maxWidth` is also set. */
+    maxHeight?: number
+    /** Whether the window is resizable or not. */
+    resizable?: boolean
+    /** Window title. */
+    title?: string
+    /** Whether the window is in fullscreen mode or not. */
+    fullscreen?: boolean
+    /** Whether the window will be initially hidden or focused. */
+    focus?: boolean
+    /** Whether the window is transparent or not. */
+    transparent?: boolean
+    /** Whether the window should be maximized upon creation or not. */
+    maximized?: boolean
+    /** Whether the window should be immediately visible upon creation or not. */
+    visible?: boolean
+    /** Whether the window should have borders and bars or not. */
+    decorations?: boolean
+    /** Whether the window should always be on top of other windows or not. */
+    alwaysOnTop?: boolean
+    /** Whether or not the window icon should be added to the taskbar. */
+    skipTaskbar?: boolean
 }
 
 /**
@@ -1159,12 +1156,12 @@ interface WindowOptions {
  * Returns `null` if current monitor can't be detected.
  */
 async function currentMonitor(): Promise<Monitor | null> {
-  return invokeTauriCommand({
-    __tauriModule: 'Window',
-    message: {
-      cmd: 'currentMonitor'
-    }
-  })
+    return invokeTauriCommand({
+        __tauriModule: 'Window',
+        message: {
+            cmd: 'currentMonitor'
+        }
+    })
 }
 
 /**
@@ -1172,39 +1169,39 @@ async function currentMonitor(): Promise<Monitor | null> {
  * Returns `null` if it can't identify any monitor as a primary one.
  */
 async function primaryMonitor(): Promise<Monitor | null> {
-  return invokeTauriCommand({
-    __tauriModule: 'Window',
-    message: {
-      cmd: 'primaryMonitor'
-    }
-  })
+    return invokeTauriCommand({
+        __tauriModule: 'Window',
+        message: {
+            cmd: 'primaryMonitor'
+        }
+    })
 }
 
 /** Returns the list of all the monitors available on the system. */
 async function availableMonitors(): Promise<Monitor[]> {
-  return invokeTauriCommand({
-    __tauriModule: 'Window',
-    message: {
-      cmd: 'availableMonitors'
-    }
-  })
+    return invokeTauriCommand({
+        __tauriModule: 'Window',
+        message: {
+            cmd: 'availableMonitors'
+        }
+    })
 }
 
 export {
-  WebviewWindow,
-  WebviewWindowHandle,
-  WindowManager,
-  getCurrent,
-  getAll,
-  appWindow,
-  LogicalSize,
-  PhysicalSize,
-  LogicalPosition,
-  PhysicalPosition,
-  UserAttentionType,
-  currentMonitor,
-  primaryMonitor,
-  availableMonitors
+    WebviewWindow,
+    WebviewWindowHandle,
+    WindowManager,
+    getCurrent,
+    getAll,
+    appWindow,
+    LogicalSize,
+    PhysicalSize,
+    LogicalPosition,
+    PhysicalPosition,
+    UserAttentionType,
+    currentMonitor,
+    primaryMonitor,
+    availableMonitors
 }
 
 export type { Monitor, WindowOptions }
